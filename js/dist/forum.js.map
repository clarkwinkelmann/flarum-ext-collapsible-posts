{"version":3,"sources":["webpack://@clarkwinkelmann/collapsible-posts/webpack/bootstrap","webpack://@clarkwinkelmann/collapsible-posts/external \"flarum.core.compat['forum/app']\"","webpack://@clarkwinkelmann/collapsible-posts/external \"flarum.core.compat['common/extend']\"","webpack://@clarkwinkelmann/collapsible-posts/external \"flarum.core.compat['forum/components/CommentPost']\"","webpack://@clarkwinkelmann/collapsible-posts/external \"flarum.core.compat['common/components/Button']\"","webpack://@clarkwinkelmann/collapsible-posts/external \"flarum.core.compat['forum/utils/PostControls']\"","webpack://@clarkwinkelmann/collapsible-posts/./src/forum/index.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","flarum","core","compat","expandedPostIds","app","initializers","add","extend","PostControls","items","post","attribute","isCollapsed","Button","component","icon","onclick","indexOf","id","push","save","then","redraw","translator","trans","CommentPost","this","attrs","subtree","check","override","original","count","className","discussion","store","find","filter","page","after","number","expandedPosts","console","log","slice","reverse","forEach","expandedPost","index","postStore","data","relationships","posts","existingIds","map","link","newPosts","type","splice","stream","current","goToNumber"],"mappings":"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","file":"forum.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 6);\n","module.exports = flarum.core.compat['forum/app'];","module.exports = flarum.core.compat['common/extend'];","module.exports = flarum.core.compat['forum/components/CommentPost'];","module.exports = flarum.core.compat['common/components/Button'];","module.exports = flarum.core.compat['forum/utils/PostControls'];","import {extend, override} from 'flarum/common/extend';\nimport app from 'flarum/forum/app';\nimport Button from 'flarum/common/components/Button';\nimport ItemList from 'flarum/common/utils/ItemList';\nimport Discussion from 'flarum/common/models/Discussion';\nimport Post from 'flarum/common/models/Post';\nimport PostControls from 'flarum/forum/utils/PostControls';\nimport CommentPost from 'flarum/forum/components/CommentPost';\n\nconst expandedPostIds: string[] = [];\n\napp.initializers.add('clarkwinkelmann-collapsible-posts', () => {\n    extend(PostControls, 'moderationControls', function (items: ItemList, post: Post) {\n        if (!post.attribute('canCollapse')) {\n            return;\n        }\n\n        const isCollapsed = post.attribute('isCollapsed');\n\n        items.add('collapse', Button.component({\n            icon: isCollapsed ? 'fas fa-arrows-alt-v' : 'fas fa-compress-alt',\n            onclick() {\n                // Add the soon to be collapsed post to the list so the stream doesn't collapse right after click\n                // (and would show multiple buttons one below another)\n                if (expandedPostIds.indexOf(post.id()) === -1) {\n                    expandedPostIds.push(post.id());\n                }\n\n                post.save({\n                    isCollapsed: !isCollapsed,\n                }).then(() => {\n                    m.redraw();\n                });\n            },\n        }, app.translator.trans('clarkwinkelmann-collapsible-posts.forum.postControl.' + (isCollapsed ? 'uncollapse' : 'collapse'))));\n    });\n\n    extend(CommentPost.prototype, 'headerItems', function (this: CommentPost, items: ItemList) {\n        // @ts-ignore missing type-hint in Flarum\n        const {post} = this.attrs;\n\n        if (post.attribute('isCollapsed')) {\n            items.add('collapsed', m('span.CollapsedPostBadge', app.translator.trans('clarkwinkelmann-collapsible-posts.forum.badge.post')));\n        }\n    });\n\n    extend(CommentPost.prototype, 'oninit', function (this: CommentPost) {\n        // @ts-ignore missing type-hint in Flarum\n        const {post} = this.attrs;\n\n        this.subtree!.check(\n            () => post.attribute('isCollapsed'),\n            () => expandedPostIds.indexOf(post.id()) === -1\n        );\n    });\n\n    override(CommentPost.prototype, 'view', function (this: CommentPost, original: any) {\n        // @ts-ignore missing type-hint in Flarum\n        const {post} = this.attrs;\n\n        if (post.attribute('isCollapsed') && expandedPostIds.indexOf(post.id()) === -1) {\n            return m('.CollapsedPost', [\n                m('.CollapsedPostText', app.translator.trans('clarkwinkelmann-collapsible-posts.forum.stream.hidden', {\n                    count: post.attribute('collapsedCount') + 1,\n                })),\n                Button.component({\n                    className: 'Button',\n                    onclick() {\n                        expandedPostIds.push(post.id());\n\n                        const discussion = post.discussion();\n\n                        app.store\n                            .find('collapsed-posts', {\n                                filter: {discussion: discussion.id()},\n                                page: {after: post.number()},\n                            })\n                            .then((expandedPosts: Post[]) => {\n                                console.log(expandedPosts);\n\n                                expandedPosts.slice().reverse().forEach((expandedPost, index) => {\n                                    // If the last post doesn't have a collapseCount value of zero, it means there will be more posts to expand\n                                    // so we don't expand it automatically\n                                    if (index === 0 && expandedPost.attribute('collapsedCount') > 0) {\n                                        return;\n                                    }\n\n                                    expandedPostIds.push(expandedPost.id());\n                                });\n\n                                const postStore = discussion.data.relationships.posts.data as { type: string, id: string }[];\n\n                                const existingIds = postStore.map(link => link.id);\n                                const index = existingIds.indexOf(post.id());\n\n                                if (index !== -1) {\n                                    const newPosts = expandedPosts.filter(expandedPost => existingIds.indexOf(expandedPost.id()) === -1).map(expandedPost => {\n                                        return {\n                                            type: 'posts',\n                                            id: expandedPost.id(),\n                                        };\n                                    });\n\n                                    // Add all posts from the response after the post on which we clicked expand\n                                    // we'll skip any post that is already in the list, which likely includes the first one\n                                    postStore.splice(index + 1, 0, ...newPosts);\n\n                                    //TODO: update stream end index\n\n                                    const stream = app.current.get('stream');\n\n                                    if (stream) {\n                                        // Going to post forces a stream update and also nicely aligns the expanded post with the viewport\n                                        stream.goToNumber(post.number());\n                                    }\n                                }\n                            });\n                    },\n                }, app.translator.trans('clarkwinkelmann-collapsible-posts.forum.stream.load')),\n            ]);\n        } else {\n            return original();\n        }\n    });\n\n    /*Discussion.prototype.originalPostIds = Discussion.prototype.postIds;\n\n    override(Discussion.prototype, 'postIds', function (this: Discussion, original: () => string[]) {\n        // Cast IDs to string for comparison\n        const collapsedIds = (this.attribute('collapsedIds') as number[]).map(id => id + '');\n\n        const allIds = original();\n        //console.log(allIds, collapsedIds);\n        return allIds.filter(id => collapsedIds.indexOf(id) === -1 || expandedPostIds.indexOf(id) !== -1);\n    });*/\n});\n"],"sourceRoot":""}